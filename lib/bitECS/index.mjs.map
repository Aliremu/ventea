{
  "version": 3,
  "sources": ["../src/Constants.js", "../src/Storage.js", "../src/Util.js", "../src/Serialize.js", "../src/Entity.js", "../src/Query.js", "../src/Component.js", "../src/World.js", "../src/System.js", "../src/index.js"],
  "sourcesContent": ["export const TYPES_ENUM = {\r\n  i8: 'i8',\r\n  ui8: 'ui8',\r\n  ui8c: 'ui8c',\r\n  i16: 'i16',\r\n  ui16: 'ui16',\r\n  i32: 'i32',\r\n  ui32: 'ui32',\r\n  f32: 'f32',\r\n  f64: 'f64',\r\n  eid: 'eid',\r\n}\r\n\r\nexport const TYPES_NAMES = {\r\n  i8: 'Int8',\r\n  ui8: 'Uint8',\r\n  ui8c: 'Uint8Clamped',\r\n  i16: 'Int16',\r\n  ui16: 'Uint16',\r\n  i32: 'Int32',\r\n  ui32: 'Uint32',\r\n  eid: 'Uint32',\r\n  f32: 'Float32',\r\n  f64: 'Float64'\r\n}\r\n\r\nexport const TYPES = {\r\n  i8: Int8Array,\r\n  ui8: Uint8Array,\r\n  ui8c: Uint8ClampedArray,\r\n  i16: Int16Array,\r\n  ui16: Uint16Array,\r\n  i32: Int32Array,\r\n  ui32: Uint32Array,\r\n  f32: Float32Array,\r\n  f64: Float64Array,\r\n  eid: Uint32Array,\r\n}\r\n\r\nexport const UNSIGNED_MAX = {\r\n  uint8: 2**8,\r\n  uint16: 2**16,\r\n  uint32: 2**32\r\n}\r\n", "import { TYPES, TYPES_ENUM, TYPES_NAMES, UNSIGNED_MAX } from './Constants.js'\r\n// import { createAllocator } from './Allocator.js'\r\n\r\nconst roundToMultiple = mul => x => Math.ceil(x / mul) * mul\r\nconst roundToMultiple4 = roundToMultiple(4)\r\n\r\nexport const $storeRef = Symbol('storeRef')\r\nexport const $storeSize = Symbol('storeSize')\r\nexport const $storeMaps = Symbol('storeMaps')\r\nexport const $storeFlattened = Symbol('storeFlattened')\r\nexport const $storeBase = Symbol('storeBase')\r\nexport const $storeType = Symbol('storeType')\r\n\r\nexport const $storeArrayElementCounts = Symbol('storeArrayElementCounts')\r\nexport const $storeSubarrays = Symbol('storeSubarrays')\r\nexport const $subarrayCursors = Symbol('subarrayCursors')\r\nexport const $subarray = Symbol('subarray')\r\nexport const $subarrayFrom = Symbol('subarrayFrom')\r\nexport const $subarrayTo = Symbol('subarrayTo')\r\nexport const $parentArray = Symbol('parentArray')\r\nexport const $tagStore = Symbol('tagStore')\r\n\r\nexport const $queryShadow = Symbol('queryShadow')\r\nexport const $serializeShadow = Symbol('serializeShadow')\r\n\r\nexport const $indexType = Symbol('indexType')\r\nexport const $indexBytes = Symbol('indexBytes')\r\n\r\nexport const $isEidType = Symbol('isEidType')\r\n\r\nconst stores = {}\r\n\r\n// const alloc = createAllocator()\r\n\r\nexport const resize = (ta, size) => {\r\n  const newBuffer = new ArrayBuffer(size * ta.BYTES_PER_ELEMENT)\r\n  const newTa = new ta.constructor(newBuffer)\r\n  newTa.set(ta, 0)\r\n  return newTa\r\n}\r\n\r\nexport const createShadow = (store, key) => {\r\n  if (!ArrayBuffer.isView(store)) {\r\n    const shadowStore = store[$parentArray].slice(0)\r\n    store[key] = store.map((_,eid) => {\r\n      const { length } = store[eid]\r\n      const start = length * eid\r\n      const end = start + length\r\n      return shadowStore.subarray(start, end)\r\n    })\r\n  } else {\r\n    store[key] = store.slice(0)\r\n  }\r\n}\r\n\r\nconst resizeSubarray = (metadata, store, storeSize) => {\r\n  const cursors = metadata[$subarrayCursors]\r\n  let type = store[$storeType]\r\n  const length = store[0].length\r\n  const indexType =\r\n    length <= UNSIGNED_MAX.uint8\r\n      ? TYPES_ENUM.ui8\r\n      : length <= UNSIGNED_MAX.uint16\r\n        ? TYPES_ENUM.ui16\r\n        : TYPES_ENUM.ui32\r\n\r\n  if (cursors[type] === 0) {\r\n\r\n    const arrayElementCount = metadata[$storeArrayElementCounts][type]\r\n    \r\n    // // for threaded impl\r\n    // // const summedBytesPerElement = Array(arrayCount).fill(0).reduce((a, p) => a + TYPES[type].BYTES_PER_ELEMENT, 0)\r\n    // // const totalBytes = roundToMultiple4(summedBytesPerElement * summedLength * size)\r\n    // // const buffer = new SharedArrayBuffer(totalBytes)\r\n\r\n    const array = new TYPES[type](roundToMultiple4(arrayElementCount * storeSize))\r\n\r\n    array.set(metadata[$storeSubarrays][type])\r\n    \r\n    metadata[$storeSubarrays][type] = array\r\n    \r\n    array[$indexType] = TYPES_NAMES[indexType]\r\n    array[$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\r\n  }\r\n\r\n  const start = cursors[type]\r\n  const end = start + (storeSize * length)\r\n  cursors[type] = end\r\n\r\n  store[$parentArray] = metadata[$storeSubarrays][type].subarray(start, end)\r\n\r\n  // pre-generate subarrays for each eid\r\n  for (let eid = 0; eid < storeSize; eid++) {\r\n    const start = length * eid\r\n    const end = start + length\r\n    store[eid] = store[$parentArray].subarray(start, end)\r\n    store[eid][$indexType] = TYPES_NAMES[indexType]\r\n    store[eid][$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\r\n    store[eid][$subarray] = true\r\n  }\r\n\r\n}\r\n\r\nconst resizeRecursive = (metadata, store, size) => {\r\n  Object.keys(store).forEach(key => {\r\n    const ta = store[key]\r\n    if (Array.isArray(ta)) {\r\n      resizeSubarray(metadata, ta, size)\r\n      store[$storeFlattened].push(ta)\r\n    } else if (ArrayBuffer.isView(ta)) {\r\n      store[key] = resize(ta, size)\r\n      store[$storeFlattened].push(store[key])\r\n    } else if (typeof ta === 'object') {\r\n      resizeRecursive(metadata, store[key], size)\r\n    }\r\n  })\r\n}\r\n\r\nexport const resizeStore = (store, size) => {\r\n  if (store[$tagStore]) return\r\n  store[$storeSize] = size\r\n  store[$storeFlattened].length = 0\r\n  Object.keys(store[$subarrayCursors]).forEach(k => {\r\n    store[$subarrayCursors][k] = 0\r\n  })\r\n  resizeRecursive(store, store, size)\r\n}\r\n\r\nexport const resetStore = store => {\r\n  if (store[$storeFlattened]) {\r\n    store[$storeFlattened].forEach(ta => {\r\n      ta.fill(0)\r\n    })\r\n    Object.keys(store[$storeSubarrays]).forEach(key => {\r\n      store[$storeSubarrays][key].fill(0)\r\n    })\r\n  }\r\n}\r\n\r\nexport const resetStoreFor = (store, eid) => {\r\n  if (store[$storeFlattened]) {\r\n    store[$storeFlattened].forEach(ta => {\r\n      if (ArrayBuffer.isView(ta)) ta[eid] = 0\r\n      else ta[eid].fill(0)\r\n    })\r\n  }\r\n}\r\n\r\nconst createTypeStore = (type, length) => {\r\n  const totalBytes = length * TYPES[type].BYTES_PER_ELEMENT\r\n  const buffer = new ArrayBuffer(totalBytes)\r\n  const store = new TYPES[type](buffer)\r\n  store[$isEidType] = type === TYPES_ENUM.eid\r\n  return store\r\n}\r\n\r\nexport const parentArray = store => store[$parentArray]\r\n\r\nconst createArrayStore = (metadata, type, length) => {\r\n  const storeSize = metadata[$storeSize]\r\n  const store = Array(storeSize).fill(0)\r\n  store[$storeType] = type\r\n  store[$isEidType] = type === TYPES_ENUM.eid\r\n\r\n  const cursors = metadata[$subarrayCursors]\r\n  const indexType =\r\n    length <= UNSIGNED_MAX.uint8\r\n      ? TYPES_ENUM.ui8\r\n      : length <= UNSIGNED_MAX.uint16\r\n        ? TYPES_ENUM.ui16\r\n        : TYPES_ENUM.ui32\r\n\r\n  if (!length) throw new Error('bitECS - Must define component array length')\r\n  if (!TYPES[type]) throw new Error(`bitECS - Invalid component array property type ${type}`)\r\n\r\n  // create buffer for type if it does not already exist\r\n  if (!metadata[$storeSubarrays][type]) {\r\n    const arrayElementCount = metadata[$storeArrayElementCounts][type]\r\n\r\n    // for threaded impl\r\n    // const summedBytesPerElement = Array(arrayCount).fill(0).reduce((a, p) => a + TYPES[type].BYTES_PER_ELEMENT, 0)\r\n    // const totalBytes = roundToMultiple4(summedBytesPerElement * summedLength * size)\r\n    // const buffer = new SharedArrayBuffer(totalBytes)\r\n\r\n    const array = new TYPES[type](roundToMultiple4(arrayElementCount * storeSize))\r\n    array[$indexType] = TYPES_NAMES[indexType]\r\n    array[$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\r\n\r\n    metadata[$storeSubarrays][type] = array\r\n    \r\n  }\r\n\r\n  const start = cursors[type]\r\n  const end = start + (storeSize * length)\r\n  cursors[type] = end\r\n\r\n  store[$parentArray] = metadata[$storeSubarrays][type].subarray(start, end)\r\n\r\n  // pre-generate subarrays for each eid\r\n  for (let eid = 0; eid < storeSize; eid++) {\r\n    const start = length * eid\r\n    const end = start + length\r\n    store[eid] = store[$parentArray].subarray(start, end)\r\n    store[eid][$indexType] = TYPES_NAMES[indexType]\r\n    store[eid][$indexBytes] = TYPES[indexType].BYTES_PER_ELEMENT\r\n    store[eid][$subarray] = true\r\n  }\r\n\r\n  return store\r\n}\r\n\r\nconst isArrayType = x => Array.isArray(x) && typeof x[0] === 'string' && typeof x[1] === 'number'\r\n\r\nexport const createStore = (schema, size) => {\r\n  const $store = Symbol('store')\r\n\r\n  if (!schema || !Object.keys(schema).length) {\r\n    // tag component\r\n    stores[$store] = {\r\n      [$storeSize]: size,\r\n      [$tagStore]: true,\r\n      [$storeBase]: () => stores[$store]\r\n    }\r\n    return stores[$store]\r\n  }\r\n\r\n  schema = JSON.parse(JSON.stringify(schema))\r\n\r\n  const arrayElementCounts = {}\r\n  const collectArrayElementCounts = s => {\r\n    const keys = Object.keys(s)\r\n    for (const k of keys) {\r\n      if (isArrayType(s[k])) {\r\n        if (!arrayElementCounts[s[k][0]]) arrayElementCounts[s[k][0]] = 0\r\n        arrayElementCounts[s[k][0]] += s[k][1]\r\n      } else if (s[k] instanceof Object) {\r\n        collectArrayElementCounts(s[k])\r\n      }\r\n    }\r\n  }\r\n  collectArrayElementCounts(schema)\r\n\r\n  const metadata = {\r\n    [$storeSize]: size,\r\n    [$storeMaps]: {},\r\n    [$storeSubarrays]: {},\r\n    [$storeRef]: $store,\r\n    [$subarrayCursors]: Object.keys(TYPES).reduce((a, type) => ({ ...a, [type]: 0 }), {}),\r\n    [$storeFlattened]: [],\r\n    [$storeArrayElementCounts]: arrayElementCounts\r\n  }\r\n\r\n  if (schema instanceof Object && Object.keys(schema).length) {\r\n\r\n    const recursiveTransform = (a, k) => {\r\n\r\n      if (typeof a[k] === 'string') {\r\n\r\n        a[k] = createTypeStore(a[k], size)\r\n        a[k][$storeBase] = () => stores[$store]\r\n        metadata[$storeFlattened].push(a[k])\r\n\r\n      } else if (isArrayType(a[k])) {\r\n        \r\n        const [type, length] = a[k]\r\n        a[k] = createArrayStore(metadata, type, length)\r\n        a[k][$storeBase] = () => stores[$store]\r\n        metadata[$storeFlattened].push(a[k])\r\n        // Object.seal(a[k])\r\n\r\n      } else if (a[k] instanceof Object) {\r\n        \r\n        a[k] = Object.keys(a[k]).reduce(recursiveTransform, a[k])\r\n        // Object.seal(a[k])\r\n        \r\n      }\r\n\r\n      return a\r\n    }\r\n\r\n    stores[$store] = Object.assign(Object.keys(schema).reduce(recursiveTransform, schema), metadata)\r\n    stores[$store][$storeBase] = () => stores[$store]\r\n\r\n    // Object.seal(stores[$store])\r\n\r\n    return stores[$store]\r\n\r\n  }\r\n}\r\n\r\nexport const free = (store) => {\r\n  delete stores[store[$storeRef]]\r\n}", "export const Uint32SparseSet = (length) => {\r\n  const dense = new Uint32Array(length)\r\n  const sparse = new Uint32Array(length)\r\n\r\n  let cursor = 0\r\n  dense.count = () => cursor + 1\r\n\r\n  const has = val => dense[sparse[val]] === val\r\n\r\n  const add = val => {\r\n    if (has(val)) return\r\n    sparse[val] = cursor\r\n    dense[cursor] = val\r\n\r\n    cursor++\r\n  }\r\n\r\n  const remove = val => {\r\n    if (!has(val)) return\r\n    const index = sparse[val]\r\n    const swapped = dense[cursor]\r\n    if (swapped !== val) {\r\n      dense[index] = swapped\r\n      sparse[swapped] = index\r\n    }\r\n\r\n    cursor--\r\n  }\r\n\r\n  return {\r\n    add,\r\n    remove,\r\n    has,\r\n    sparse,\r\n    dense,\r\n  }\r\n}\r\n\r\nexport const SparseSet = () => {\r\n  const dense = []\r\n  const sparse = []\r\n\r\n  dense.sort = function (comparator) {\r\n    const result = Array.prototype.sort.call(this, comparator)\r\n\r\n    for(let i = 0; i < dense.length; i++) {\r\n      sparse[dense[i]] = i\r\n    }\r\n    \r\n    return result\r\n  }\r\n\r\n  const has = val => dense[sparse[val]] === val\r\n\r\n  const add = val => {\r\n    if (has(val)) return\r\n    sparse[val] = dense.push(val) - 1\r\n  }\r\n\r\n  const remove = val => {\r\n    if (!has(val)) return\r\n    const index = sparse[val]\r\n    const swapped = dense.pop()\r\n    if (swapped !== val) {\r\n      dense[index] = swapped\r\n      sparse[swapped] = index\r\n    }\r\n  }\r\n\r\n  return {\r\n    add,\r\n    remove,\r\n    has,\r\n    sparse,\r\n    dense,\r\n  }\r\n}", "import { $indexBytes, $indexType, $isEidType, $serializeShadow, $storeBase, $storeFlattened, $tagStore, createShadow } from \"./Storage.js\"\r\nimport { $componentMap, addComponent, hasComponent } from \"./Component.js\"\r\nimport { $entityArray, $entitySparseSet, addEntity, eidToWorld } from \"./Entity.js\"\r\nimport { $localEntities, $localEntityLookup } from \"./World.js\"\r\nimport { SparseSet } from \"./Util.js\"\r\n\r\nexport const DESERIALIZE_MODE = {\r\n  REPLACE: 0,\r\n  APPEND: 1,\r\n  MAP: 2\r\n}\r\n\r\nlet resized = false\r\n\r\nexport const setSerializationResized = v => { resized = v }\r\n\r\nconst concat = (a,v) => a.concat(v)\r\nconst not = fn => v => !fn(v)\r\n\r\nconst storeFlattened = c => c[$storeFlattened]\r\nconst isFullComponent = storeFlattened\r\nconst isProperty = not(isFullComponent)\r\n\r\nconst isModifier = c => typeof c === 'function'\r\nconst isNotModifier = not(isModifier)\r\n\r\nconst isChangedModifier = c => isModifier(c) && c()[1] === 'changed'\r\n\r\nconst isWorld = w => Object.getOwnPropertySymbols(w).includes($componentMap)\r\n\r\nconst fromModifierToComponent = c => c()[0]\r\n\r\nexport const canonicalize = target => {\r\n\r\n  if (isWorld(target)) return [[],new Map()]\r\n\r\n  // aggregate full components\r\n  const fullComponentProps = target\r\n    .filter(isNotModifier)\r\n    .filter(isFullComponent)\r\n    .map(storeFlattened).reduce(concat, [])\r\n  \r\n  // aggregate changed full components\r\n  const changedComponentProps = target\r\n    .filter(isChangedModifier).map(fromModifierToComponent)\r\n    .filter(isFullComponent)\r\n    .map(storeFlattened).reduce(concat, [])\r\n\r\n  // aggregate props\r\n  const props = target\r\n    .filter(isNotModifier)\r\n    .filter(isProperty)\r\n\r\n  // aggregate changed props\r\n  const changedProps = target\r\n    .filter(isChangedModifier).map(fromModifierToComponent)\r\n    .filter(isProperty)\r\n  \r\n  const componentProps = [...fullComponentProps, ...props, ...changedComponentProps, ...changedProps]\r\n  const allChangedProps = [...changedComponentProps, ...changedProps].reduce((map,prop) => {\r\n    const $ = Symbol()\r\n    createShadow(prop, $)\r\n    map.set(prop, $)\r\n    return map\r\n  }, new Map())\r\n\r\n  return [componentProps, allChangedProps]\r\n}\r\n\r\n/**\r\n * Defines a new serializer which targets the given components to serialize the data of when called on a world or array of EIDs.\r\n *\r\n * @param {object|array} target\r\n * @param {number} [maxBytes=20000000]\r\n * @returns {function} serializer\r\n */\r\nexport const defineSerializer = (target, maxBytes = 20000000) => {\r\n  const worldSerializer = isWorld(target)\r\n\r\n  let [componentProps, changedProps] = canonicalize(target)\r\n\r\n  // TODO: calculate max bytes based on target & recalc upon resize\r\n\r\n  const buffer = new ArrayBuffer(maxBytes)\r\n  const view = new DataView(buffer)\r\n\r\n  const entityComponentCache = new Map()\r\n\r\n  return (ents) => {\r\n\r\n    if (resized) {\r\n      [componentProps, changedProps] = canonicalize(target)\r\n      resized = false\r\n    }\r\n\r\n    if (worldSerializer) {\r\n      componentProps = []\r\n      target[$componentMap].forEach((c, component) => {\r\n        if (component[$storeFlattened])\r\n          componentProps.push(...component[$storeFlattened])\r\n        else componentProps.push(component)\r\n      })\r\n    }\r\n    \r\n    let world\r\n    if (Object.getOwnPropertySymbols(ents).includes($componentMap)) {\r\n      world = ents\r\n      ents = ents[$entityArray]\r\n    } else {\r\n      world = eidToWorld.get(ents[0])\r\n    }\r\n\r\n    let where = 0\r\n\r\n    if (!ents.length) return buffer.slice(0, where)\r\n\r\n    const cache = new Map()\r\n\r\n    // iterate over component props\r\n    for (let pid = 0; pid < componentProps.length; pid++) {\r\n      const prop = componentProps[pid]\r\n      const component = prop[$storeBase]()\r\n      const $diff = changedProps.get(prop)\r\n      const shadow = $diff ? prop[$diff] : null\r\n\r\n      if (!cache.has(component)) cache.set(component, new Map())\r\n\r\n      // write pid\r\n      view.setUint8(where, pid)\r\n      where += 1\r\n\r\n      // save space for entity count\r\n      const countWhere = where\r\n      where += 4\r\n\r\n      let writeCount = 0\r\n      // write eid,val\r\n      for (let i = 0; i < ents.length; i++) {\r\n        const eid = ents[i]\r\n\r\n        let componentCache = entityComponentCache.get(eid)\r\n        if (!componentCache) componentCache = entityComponentCache.set(eid, new Set()).get(eid)\r\n        \r\n        componentCache.add(eid)\r\n        \r\n        const newlyAddedComponent = \r\n          // if we are diffing\r\n          shadow \r\n          // and we have already iterated over this component for this entity\r\n          // retrieve cached value    \r\n          && cache.get(component).get(eid)\r\n          // or if entity did not have component last call\r\n          || !componentCache.has(component)\r\n          // and entity has component this call\r\n          && hasComponent(world, component, eid)\r\n\r\n        cache.get(component).set(eid, newlyAddedComponent)\r\n\r\n        if (newlyAddedComponent) {\r\n          componentCache.add(component)\r\n        } else if (!hasComponent(world, component, eid)) {\r\n          // skip if entity doesn't have this component\r\n          componentCache.delete(component)\r\n          continue\r\n        } \r\n\r\n        \r\n        const rewindWhere = where\r\n\r\n        // write eid\r\n        view.setUint32(where, eid)\r\n        where += 4\r\n\r\n        // if it's a tag store we can stop here\r\n        if (prop[$tagStore]) {\r\n          writeCount++\r\n          continue\r\n        }\r\n\r\n        // if property is an array\r\n        if (ArrayBuffer.isView(prop[eid])) {\r\n          const type = prop[eid].constructor.name.replace('Array', '')\r\n          const indexType = prop[eid][$indexType]\r\n          const indexBytes = prop[eid][$indexBytes]\r\n\r\n          // save space for count of dirty array elements\r\n          const countWhere2 = where\r\n          where += indexBytes\r\n\r\n          let arrayWriteCount = 0\r\n\r\n          // write index,value\r\n          for (let i = 0; i < prop[eid].length; i++) {\r\n\r\n            if (shadow) {\r\n\r\n              const changed = shadow[eid][i] !== prop[eid][i]\r\n              \r\n              // sync shadow\r\n              shadow[eid][i] = prop[eid][i]              \r\n\r\n              // if state has not changed since the last call\r\n              // todo: if newly added then entire component will serialize (instead of only changed values)\r\n              if (!changed && !newlyAddedComponent) {\r\n                // skip writing this value\r\n                continue\r\n              }\r\n            }\r\n            \r\n            // write array index\r\n            view[`set${indexType}`](where, i)\r\n            where += indexBytes\r\n            \r\n            // write value at that index\r\n            const value = prop[eid][i]\r\n            view[`set${type}`](where, value)\r\n            where += prop[eid].BYTES_PER_ELEMENT\r\n            arrayWriteCount++\r\n          }\r\n\r\n          if (arrayWriteCount > 0) {\r\n            // write total element count\r\n            view[`set${indexType}`](countWhere2, arrayWriteCount)\r\n            writeCount++\r\n          } else {\r\n            where = rewindWhere\r\n            continue\r\n          }\r\n        } else {\r\n\r\n          if (shadow) {\r\n\r\n            const changed = shadow[eid] !== prop[eid]\r\n\r\n            shadow[eid] = prop[eid]\r\n\r\n            // do not write value if diffing and no change\r\n            if (!changed && !newlyAddedComponent) {\r\n              // rewind the serializer\r\n              where = rewindWhere\r\n              // skip writing this value\r\n              continue\r\n            }\r\n\r\n          }  \r\n\r\n\r\n          const type = prop.constructor.name.replace('Array', '')\r\n          // set value next [type] bytes\r\n          view[`set${type}`](where, prop[eid])\r\n          where += prop.BYTES_PER_ELEMENT\r\n\r\n          writeCount++\r\n        }\r\n      }\r\n\r\n      if (writeCount > 0) {\r\n        // write how many eid/value pairs were written\r\n        view.setUint32(countWhere, writeCount)\r\n      } else {\r\n        // if nothing was written (diffed with no changes) \r\n        // then move cursor back 5 bytes (remove PID and countWhere space)\r\n        where -= 5\r\n      }\r\n    }\r\n    return buffer.slice(0, where)\r\n  }\r\n}\r\n\r\nconst newEntities = new Map()\r\n\r\n/**\r\n * Defines a new deserializer which targets the given components to deserialize onto a given world.\r\n *\r\n * @param {object|array} target\r\n * @returns {function} deserializer\r\n */\r\nexport const defineDeserializer = (target) => {\r\n  const isWorld = Object.getOwnPropertySymbols(target).includes($componentMap)\r\n  let [componentProps] = canonicalize(target)\r\n\r\n  const deserializedEntities = new Set()\r\n\r\n  return (world, packet, mode=0) => {\r\n\r\n    newEntities.clear()\r\n    \r\n    if (resized) {\r\n      [componentProps] = canonicalize(target)\r\n      resized = false\r\n    }\r\n\r\n    if (isWorld) {\r\n      componentProps = []\r\n      target[$componentMap].forEach((c, component) => {\r\n        if (component[$storeFlattened])\r\n          componentProps.push(...component[$storeFlattened])\r\n        else componentProps.push(component)\r\n      })\r\n    }\r\n\r\n    const localEntities = world[$localEntities]\r\n    const localEntityLookup = world[$localEntityLookup]\r\n\r\n    const view = new DataView(packet)\r\n    let where = 0\r\n\r\n    while (where < packet.byteLength) {\r\n\r\n      // pid\r\n      const pid = view.getUint8(where)\r\n      where += 1\r\n\r\n      // entity count\r\n      const entityCount = view.getUint32(where)\r\n      where += 4\r\n\r\n      // component property\r\n      const prop = componentProps[pid]\r\n\r\n      // Get the entities and set their prop values\r\n      for (let i = 0; i < entityCount; i++) {\r\n        let eid = view.getUint32(where) // throws with [changed, c, changed]\r\n        where += 4\r\n\r\n        if (mode === DESERIALIZE_MODE.MAP) {\r\n          if (localEntities.has(eid)) {\r\n            eid = localEntities.get(eid)\r\n          } else if (newEntities.has(eid)) {\r\n            eid = newEntities.get(eid)\r\n          } else {\r\n            const newEid = addEntity(world)\r\n            localEntities.set(eid, newEid)\r\n            localEntityLookup.set(newEid, eid)\r\n            newEntities.set(eid, newEid)\r\n            eid = newEid\r\n          }\r\n        }\r\n\r\n        if (mode === DESERIALIZE_MODE.APPEND ||  \r\n          mode === DESERIALIZE_MODE.REPLACE && !world[$entitySparseSet].has(eid)\r\n        ) {\r\n          const newEid = newEntities.get(eid) || addEntity(world)\r\n          newEntities.set(eid, newEid)\r\n          eid = newEid\r\n        }\r\n\r\n        const component = prop[$storeBase]()\r\n        if (!hasComponent(world, component, eid)) {\r\n          addComponent(world, component, eid)\r\n        }\r\n\r\n        // add eid to deserialized ents after it has been transformed by MAP mode\r\n        deserializedEntities.add(eid)\r\n\r\n        if (component[$tagStore]) {\r\n          continue\r\n        }\r\n        \r\n        if (ArrayBuffer.isView(prop[eid])) {\r\n          const array = prop[eid]\r\n          const count = view[`get${array[$indexType]}`](where)\r\n          where += array[$indexBytes]\r\n\r\n          // iterate over count\r\n          for (let i = 0; i < count; i++) {\r\n            const index = view[`get${array[$indexType]}`](where)\r\n            where += array[$indexBytes]\r\n\r\n            const value = view[`get${array.constructor.name.replace('Array', '')}`](where)\r\n            where += array.BYTES_PER_ELEMENT\r\n            if (prop[$isEidType]) {\r\n              let localEid\r\n              if (localEntities.has(value)) {\r\n                localEid = localEntities.get(value)\r\n              } else if (newEntities.has(value)) {\r\n                localEid = newEntities.get(value)\r\n              } else {\r\n                const newEid = addEntity(world)\r\n                localEntities.set(value, newEid)\r\n                localEntityLookup.set(newEid, value)\r\n                newEntities.set(value, newEid)\r\n                localEid = newEid\r\n              }\r\n              prop[eid][index] = localEid\r\n            } else prop[eid][index] = value\r\n          }\r\n        } else {\r\n          const value = view[`get${prop.constructor.name.replace('Array', '')}`](where)\r\n          where += prop.BYTES_PER_ELEMENT\r\n\r\n          if (prop[$isEidType]) {\r\n            let localEid\r\n            if (localEntities.has(value)) {\r\n              localEid = localEntities.get(value)\r\n            } else if (newEntities.has(value)) {\r\n              localEid = newEntities.get(value)\r\n            } else {\r\n              const newEid = addEntity(world)\r\n              localEntities.set(value, newEid)\r\n              localEntityLookup.set(newEid, value)\r\n              newEntities.set(value, newEid)\r\n              localEid = newEid\r\n            }\r\n            prop[eid] = localEid\r\n          } else prop[eid] = value\r\n        }\r\n      }\r\n    }\r\n\r\n    const ents = Array.from(deserializedEntities)\r\n\r\n    deserializedEntities.clear()\r\n\r\n    return ents\r\n  }\r\n}", "import { resizeComponents } from './Component.js'\r\nimport { $notQueries, $queries, queryAddEntity, queryCheckEntity, queryRemoveEntity } from './Query.js'\r\nimport { $localEntities, $localEntityLookup, resizeWorlds } from './World.js'\r\nimport { setSerializationResized } from './Serialize.js'\r\n\r\nexport const $entityMasks = Symbol('entityMasks')\r\nexport const $entityComponents = Symbol('entityComponents')\r\nexport const $entitySparseSet = Symbol('entitySparseSet')\r\nexport const $entityArray = Symbol('entityArray')\r\nexport const $entityIndices = Symbol('entityIndices')\r\nexport const $removedEntities = Symbol('removedEntities')\r\n\r\nlet defaultSize = 100000\r\n\r\n// need a global EID cursor which all worlds and all components know about\r\n// so that world entities can posess entire rows spanning all component tables\r\nlet globalEntityCursor = 0\r\nlet globalSize = defaultSize\r\nlet resizeThreshold = () => globalSize - (globalSize / 5)\r\n\r\nexport const getGlobalSize = () => globalSize\r\n\r\n// removed eids should also be global to prevent memory leaks\r\nconst removed = []\r\nconst defaultRemovedReuseThreshold = 0.01\r\nlet removedReuseThreshold = defaultRemovedReuseThreshold\r\n\r\nexport const resetGlobals = () => {\r\n  globalSize = defaultSize\r\n  globalEntityCursor = 0\r\n  removedReuseThreshold = defaultRemovedReuseThreshold\r\n  removed.length = 0\r\n}\r\n\r\nexport const getDefaultSize = () => defaultSize\r\n\r\n/**\r\n * Sets the default maximum number of entities for worlds and component stores.\r\n *\r\n * @param {number} newSize\r\n */\r\nexport const setDefaultSize = newSize => { \r\n  const oldSize = globalSize\r\n\r\n  defaultSize = newSize\r\n  resetGlobals()\r\n\r\n  globalSize = newSize\r\n  resizeWorlds(newSize)\r\n  resizeComponents(newSize)\r\n  setSerializationResized(true)\r\n\r\n  console.info(`\uD83D\uDC7E bitECS - resizing all data stores from ${oldSize} to ${newSize}`)\r\n}\r\n\r\n/**\r\n * Sets the number of entities that must be removed before removed entity ids begin to be recycled.\r\n * This should be set to as a % (0-1) of `defaultSize` that you would never likely remove/add on a single frame.\r\n *\r\n * @param {number} newThreshold\r\n */\r\nexport const setRemovedRecycleThreshold = newThreshold => {\r\n  removedReuseThreshold = newThreshold\r\n}\r\n\r\nexport const getEntityCursor = () => globalEntityCursor\r\nexport const getRemovedEntities = () => removed\r\n\r\nexport const eidToWorld = new Map()\r\n\r\n/**\r\n * Adds a new entity to the specified world.\r\n *\r\n * @param {World} world\r\n * @returns {number} eid\r\n */\r\nexport const addEntity = (world) => {\r\n\r\n  // if data stores are 80% full\r\n  if (globalEntityCursor >= resizeThreshold()) {\r\n    // grow by half the original size rounded up to a multiple of 4\r\n    const size = globalSize\r\n    const amount = Math.ceil((size/2) / 4) * 4\r\n    setDefaultSize(size + amount)\r\n  }\r\n  \r\n  const eid = removed.length > Math.round(defaultSize * removedReuseThreshold) ? removed.shift() : globalEntityCursor++\r\n  \r\n  world[$entitySparseSet].add(eid)\r\n  eidToWorld.set(eid, world)\r\n\r\n  world[$notQueries].forEach(q => {\r\n    const match = queryCheckEntity(world, q, eid)\r\n    if (match) queryAddEntity(q, eid)\r\n  })\r\n\r\n  world[$entityComponents].set(eid, new Set())\r\n\r\n  return eid\r\n}\r\n\r\n/**\r\n * Removes an existing entity from the specified world.\r\n *\r\n * @param {World} world\r\n * @param {number} eid\r\n */\r\nexport const removeEntity = (world, eid) => {\r\n  // Check if entity is already removed\r\n  if (!world[$entitySparseSet].has(eid)) return\r\n\r\n  // Remove entity from all queries\r\n  // TODO: archetype graph\r\n  world[$queries].forEach(q => {\r\n    queryRemoveEntity(world, q, eid)\r\n  })\r\n\r\n  // Free the entity\r\n  removed.push(eid)\r\n\r\n  // remove all eid state from world\r\n  world[$entitySparseSet].remove(eid)\r\n  world[$entityComponents].delete(eid)\r\n\r\n  // remove from deserializer mapping\r\n  world[$localEntities].delete(world[$localEntityLookup].get(eid))\r\n  world[$localEntityLookup].delete(eid)\r\n\r\n  // Clear entity bitmasks\r\n  for (let i = 0; i < world[$entityMasks].length; i++) world[$entityMasks][i][eid] = 0\r\n}\r\n\r\n/**\r\n *  Returns an array of components that an entity possesses.\r\n *\r\n * @param {*} world\r\n * @param {*} eid\r\n */\r\nexport const getEntityComponents = (world, eid) => {\r\n  if (eid === undefined) throw new Error('bitECS - entity is undefined.')\r\n  if (!world[$entitySparseSet].has(eid)) throw new Error('bitECS - entity does not exist in the world.')\r\n  return Array.from(world[$entityComponents].get(eid))\r\n}\r\n\r\n/**\r\n * Checks the existence of an entity in a world\r\n * \r\n * @param {World} world \r\n * @param {number} eid \r\n */\r\nexport const entityExists = (world, eid) => world[$entitySparseSet].has(eid)\r\n", "import { SparseSet } from './Util.js'\r\nimport { $queryShadow, $storeFlattened, $tagStore, createShadow } from './Storage.js'\r\nimport { $componentMap, registerComponent } from './Component.js'\r\nimport { $entityMasks, $entityArray, getEntityCursor, $entitySparseSet } from './Entity.js'\r\n\r\n\r\n\r\nexport function Not(c) { return () => [c, 'not'] }\r\nexport function Or(c) { return () => [c, 'or'] }\r\nexport function Changed(c) { return () => [c, 'changed'] }\r\n\r\nexport function Any(...comps) { return function QueryAny() { return comps } }\r\nexport function All(...comps) { return function QueryAll() { return comps } }\r\nexport function None(...comps) { return function QueryNone() { return comps } }\r\n\r\nexport const $queries = Symbol('queries')\r\nexport const $notQueries = Symbol('notQueries')\r\n\r\nexport const $queryAny = Symbol('queryAny')\r\nexport const $queryAll = Symbol('queryAll')\r\nexport const $queryNone = Symbol('queryNone')\r\n\r\nexport const $queryMap = Symbol('queryMap')\r\nexport const $dirtyQueries = Symbol('$dirtyQueries')\r\nexport const $queryComponents = Symbol('queryComponents')\r\nexport const $enterQuery = Symbol('enterQuery')\r\nexport const $exitQuery = Symbol('exitQuery')\r\n\r\n/**\r\n * Given an existing query, returns a new function which returns entities who have been added to the given query since the last call of the function.\r\n *\r\n * @param {function} query\r\n * @returns {function} enteredQuery\r\n */\r\nexport const enterQuery = query => world => {\r\n  if (!world[$queryMap].has(query)) registerQuery(world, query)\r\n  const q = world[$queryMap].get(query)\r\n  // queryCommitRemovals(q)\r\n  const entered = q.entered.dense.slice()\r\n  q.entered = SparseSet()\r\n  return entered\r\n}\r\n\r\n/**\r\n * Given an existing query, returns a new function which returns entities who have been removed from the given query since the last call of the function.\r\n *\r\n * @param {function} query\r\n * @returns {function} enteredQuery\r\n */\r\nexport const exitQuery = query => world => {\r\n  if (!world[$queryMap].has(query)) registerQuery(world, query)\r\n  const q = world[$queryMap].get(query)\r\n  // queryCommitRemovals(q)\r\n  const exited = q.exited.dense.slice()\r\n  q.exited = SparseSet()\r\n  return exited\r\n}\r\n\r\nexport const registerQuery = (world, query) => {\r\n\r\n  const components = []\r\n  const notComponents = []\r\n  const changedComponents = []\r\n\r\n  query[$queryComponents].forEach(c => {\r\n    if (typeof c === 'function') {\r\n      const [comp, mod] = c()\r\n      if (!world[$componentMap].has(comp)) registerComponent(world, comp)\r\n      if (mod === 'not') {\r\n        notComponents.push(comp)\r\n      }\r\n      if (mod === 'changed') {\r\n        changedComponents.push(comp)\r\n        components.push(comp)\r\n      }\r\n      // if (mod === 'all') {\r\n      //   allComponents.push(comp)\r\n      // }\r\n      // if (mod === 'any') {\r\n      //   anyComponents.push(comp)\r\n      // }\r\n      // if (mod === 'none') {\r\n      //   noneComponents.push(comp)\r\n      // }\r\n    } else {\r\n      if (!world[$componentMap].has(c)) registerComponent(world, c)\r\n      components.push(c)\r\n    }\r\n  })\r\n\r\n\r\n  const mapComponents = c => world[$componentMap].get(c)\r\n\r\n  const allComponents = components.concat(notComponents).map(mapComponents)\r\n\r\n  // const sparseSet = Uint32SparseSet(getGlobalSize())\r\n  const sparseSet = SparseSet()\r\n\r\n  const archetypes = []\r\n  // const changed = SparseSet()\r\n  const changed = []\r\n  const toRemove = SparseSet()\r\n  const entered = SparseSet()\r\n  const exited = SparseSet()\r\n\r\n  const generations = allComponents\r\n    .map(c => c.generationId)\r\n    .reduce((a,v) => {\r\n      if (a.includes(v)) return a\r\n      a.push(v)\r\n      return a\r\n    }, [])\r\n\r\n  const reduceBitflags = (a,c) => {\r\n    if (!a[c.generationId]) a[c.generationId] = 0\r\n    a[c.generationId] |= c.bitflag\r\n    return a\r\n  }\r\n  const masks = components\r\n    .map(mapComponents)\r\n    .reduce(reduceBitflags, {})\r\n\r\n  const notMasks = notComponents\r\n    .map(mapComponents)\r\n    .reduce(reduceBitflags, {})\r\n\r\n  // const orMasks = orComponents\r\n  //   .map(mapComponents)\r\n  //   .reduce(reduceBitmasks, {})\r\n\r\n  const hasMasks = allComponents\r\n    .reduce(reduceBitflags, {})\r\n\r\n  const flatProps = components\r\n    .filter(c => !c[$tagStore])\r\n    .map(c => Object.getOwnPropertySymbols(c).includes($storeFlattened) ? c[$storeFlattened] : [c])\r\n    .reduce((a,v) => a.concat(v), [])\r\n\r\n  const shadows = []\r\n\r\n  const q = Object.assign(sparseSet, {\r\n    archetypes,\r\n    changed,\r\n    components,\r\n    notComponents,\r\n    changedComponents,\r\n    allComponents,\r\n    masks,\r\n    notMasks,\r\n    // orMasks,\r\n    hasMasks,\r\n    generations,\r\n    flatProps,\r\n    toRemove,\r\n    entered,\r\n    exited,\r\n    shadows,\r\n  })\r\n\r\n  world[$queryMap].set(query, q)\r\n  world[$queries].add(q)\r\n  \r\n  allComponents.forEach(c => {\r\n    c.queries.add(q)\r\n  })\r\n\r\n  if (notComponents.length) world[$notQueries].add(q)\r\n\r\n  for (let eid = 0; eid < getEntityCursor(); eid++) {\r\n    if (!world[$entitySparseSet].has(eid)) continue\r\n    const match = queryCheckEntity(world, q, eid)\r\n    if (match) queryAddEntity(q, eid)\r\n  }\r\n}\r\n\r\nconst generateShadow = (q, pid) => {\r\n  const $ = Symbol()\r\n  const prop = q.flatProps[pid]\r\n  createShadow(prop, $)\r\n  q.shadows[pid] = prop[$]\r\n  return prop[$]\r\n}\r\n\r\nconst diff = (q, clearDiff) => {\r\n  if (clearDiff) q.changed = []\r\n  const { flatProps, shadows } = q\r\n  for (let i = 0; i < q.dense.length; i++) {\r\n    const eid = q.dense[i]\r\n    let dirty = false\r\n    for (let pid = 0; pid < flatProps.length; pid++) {\r\n      const prop = flatProps[pid]\r\n      const shadow = shadows[pid] || generateShadow(q, pid)\r\n      if (ArrayBuffer.isView(prop[eid])) {\r\n        for (let i = 0; i < prop[eid].length; i++) {\r\n          if (prop[eid][i] !== shadow[eid][i]) {\r\n            dirty = true\r\n            break\r\n          }\r\n        }\r\n        shadow[eid].set(prop[eid])\r\n      } else {\r\n        if (prop[eid] !== shadow[eid]) {\r\n          dirty = true\r\n          shadow[eid] = prop[eid]\r\n        }\r\n      }\r\n    }\r\n    if (dirty) q.changed.push(eid)\r\n  }\r\n  return q.changed\r\n}\r\n\r\n// const queryEntityChanged = (q, eid) => {\r\n//   if (q.changed.has(eid)) return\r\n//   q.changed.add(eid)\r\n// }\r\n\r\n// export const entityChanged = (world, component, eid) => {\r\n//   const { changedQueries } = world[$componentMap].get(component)\r\n//   changedQueries.forEach(q => {\r\n//     const match = queryCheckEntity(world, q, eid)\r\n//     if (match) queryEntityChanged(q, eid)\r\n//   })\r\n// }\r\n\r\nconst flatten = (a,v) => a.concat(v)\r\n\r\nconst aggregateComponentsFor = mod => x => x.filter(f => f.name === mod().constructor.name).reduce(flatten)\r\n\r\nconst getAnyComponents = aggregateComponentsFor(Any)\r\nconst getAllComponents = aggregateComponentsFor(All)\r\nconst getNoneComponents = aggregateComponentsFor(None)\r\n\r\n/**\r\n * Defines a query function which returns a matching set of entities when called on a world.\r\n *\r\n * @param {array} components\r\n * @returns {function} query\r\n */\r\n\r\nexport const defineQuery = (...args) => {\r\n  let components\r\n  let any, all, none\r\n  if (Array.isArray(args[0])) {\r\n    components = args[0]\r\n  } else {\r\n    // any = getAnyComponents(args)\r\n    // all = getAllComponents(args)\r\n    // none = getNoneComponents(args)\r\n  }\r\n  \r\n\r\n  if (components === undefined || components[$componentMap] !== undefined) {\r\n    return world => world ? world[$entityArray] : components[$entityArray]\r\n  }\r\n\r\n  const query = function (world, clearDiff=true) {\r\n    if (!world[$queryMap].has(query)) registerQuery(world, query)\r\n\r\n    const q = world[$queryMap].get(query)\r\n\r\n    commitRemovals(world)\r\n\r\n    if (q.changedComponents.length) return diff(q, clearDiff)\r\n    // if (q.changedComponents.length) return q.changed.dense\r\n\r\n    return q.dense\r\n  }\r\n\r\n  query[$queryComponents] = components\r\n  query[$queryAny] = any\r\n  query[$queryAll] = all\r\n  query[$queryNone] = none\r\n\r\n  return query\r\n}\r\n\r\nconst bin = value => {\r\n  if (!Number.isSafeInteger(value)) {\r\n    throw new TypeError('value must be a safe integer');\r\n  }\r\n\r\n  const negative = value < 0;\r\n  const twosComplement = negative ? Number.MAX_SAFE_INTEGER + value + 1 : value;\r\n  const signExtend = negative ? '1' : '0';\r\n\r\n  return twosComplement.toString(2).padStart(4, '0').padStart(0, signExtend);\r\n}\r\n\r\n// TODO: archetype graph\r\nexport const queryCheckEntity = (world, q, eid) => {\r\n  const { masks, notMasks, generations } = q\r\n  let or = 0\r\n  for (let i = 0; i < generations.length; i++) {\r\n    const generationId = generations[i]\r\n    const qMask = masks[generationId]\r\n    const qNotMask = notMasks[generationId]\r\n    // const qOrMask = orMasks[generationId]\r\n    const eMask = world[$entityMasks][generationId][eid]\r\n    \r\n    // any\r\n    // if (qOrMask && (eMask & qOrMask) !== qOrMask) {\r\n    //   continue\r\n    // }\r\n    // not all \r\n    // if (qNotMask && (eMask & qNotMask) === qNotMask) {\r\n    // }\r\n    // not any\r\n    if (qNotMask && (eMask & qNotMask) !== 0) {\r\n      return false\r\n    }\r\n    // all\r\n    if (qMask && (eMask & qMask) !== qMask) {\r\n      return false\r\n    }\r\n  }\r\n  return true\r\n}\r\n\r\nexport const queryCheckComponent = (q, c) => {\r\n  const { generationId, bitflag } = c\r\n  const { hasMasks } = q\r\n  const mask = hasMasks[generationId]\r\n  return (mask & bitflag) === bitflag\r\n}\r\n\r\nexport const queryAddEntity = (q, eid) => {\r\n  q.toRemove.remove(eid)\r\n  // if (!q.has(eid)) \r\n  q.entered.add(eid)\r\n  q.add(eid)\r\n}\r\n\r\nconst queryCommitRemovals = (q) => {\r\n  for (let i = q.toRemove.dense.length-1; i >= 0; i--) {\r\n    const eid = q.toRemove.dense[i]\r\n    q.toRemove.remove(eid)\r\n    q.remove(eid)\r\n  }\r\n}\r\n\r\nexport const commitRemovals = (world) => {\r\n  if (!world[$dirtyQueries].size) return\r\n  world[$dirtyQueries].forEach(queryCommitRemovals)\r\n  world[$dirtyQueries].clear()\r\n}\r\n\r\nexport const queryRemoveEntity = (world, q, eid) => {\r\n  if (!q.has(eid) || q.toRemove.has(eid)) return\r\n  q.toRemove.add(eid)\r\n  world[$dirtyQueries].add(q)\r\n  q.exited.add(eid)\r\n}\r\n\r\n\r\n/**\r\n * Resets a Changed-based query, clearing the underlying list of changed entities.\r\n *\r\n * @param {World} world\r\n * @param {function} query\r\n */\r\nexport const resetChangedQuery = (world, query) => {\r\n  const q = world[$queryMap].get(query)\r\n  q.changed = []\r\n}\r\n\r\n/**\r\n * Removes a query from a world.\r\n *\r\n * @param {World} world\r\n * @param {function} query\r\n */\r\nexport const removeQuery = (world, query) => {\r\n  const q = world[$queryMap].get(query)\r\n  world[$queries].delete(q)\r\n  world[$queryMap].delete(query)\r\n}", "import { $storeSize, createStore, resetStoreFor, resizeStore } from './Storage.js'\r\nimport { $queries, queryAddEntity, queryRemoveEntity, queryCheckEntity, commitRemovals } from './Query.js'\r\nimport { $bitflag, $size } from './World.js'\r\nimport { $entityMasks, getDefaultSize, eidToWorld, $entityComponents, getGlobalSize, $entitySparseSet } from './Entity.js'\r\n\r\nexport const $componentMap = Symbol('componentMap')\r\n\r\nexport const components = []\r\n\r\nexport const resizeComponents = (size) => {\r\n  components.forEach(component => resizeStore(component, size))\r\n}\r\n\r\n\r\n/**\r\n * Defines a new component store.\r\n *\r\n * @param {object} schema\r\n * @returns {object}\r\n */\r\nexport const defineComponent = (schema, size) => {\r\n  const component = createStore(schema, size || getGlobalSize())\r\n  if (schema && Object.keys(schema).length) components.push(component)\r\n  return component\r\n}\r\n\r\nexport const incrementBitflag = (world) => {\r\n  world[$bitflag] *= 2\r\n  if (world[$bitflag] >= 2**31) {\r\n    world[$bitflag] = 1\r\n    world[$entityMasks].push(new Uint32Array(world[$size]))\r\n  }\r\n}\r\n\r\n\r\n/**\r\n * Registers a component with a world.\r\n *\r\n * @param {World} world\r\n * @param {Component} component\r\n */\r\nexport const registerComponent = (world, component) => {\r\n  if (!component) throw new Error(`bitECS - Cannot register null or undefined component`)\r\n\r\n  const queries = new Set()\r\n  const notQueries = new Set()\r\n  const changedQueries = new Set()\r\n\r\n  world[$queries].forEach(q => {\r\n    if (q.allComponents.includes(component)) {\r\n      queries.add(q)\r\n    }\r\n  })\r\n\r\n  world[$componentMap].set(component, { \r\n    generationId: world[$entityMasks].length - 1,\r\n    bitflag: world[$bitflag],\r\n    store: component,\r\n    queries,\r\n    notQueries,\r\n    changedQueries,\r\n  })\r\n\r\n  if (component[$storeSize] < getGlobalSize()) {\r\n    resizeStore(component, getGlobalSize())\r\n  }\r\n\r\n  incrementBitflag(world)\r\n}\r\n\r\n/**\r\n * Registers multiple components with a world.\r\n *\r\n * @param {World} world\r\n * @param {Component} components\r\n */\r\nexport const registerComponents = (world, components) => {\r\n  components.forEach(c => registerComponent(world, c))\r\n}\r\n\r\n/**\r\n * Checks if an entity has a component.\r\n *\r\n * @param {World} world\r\n * @param {Component} component\r\n * @param {number} eid\r\n * @returns {boolean}\r\n */\r\nexport const hasComponent = (world, component, eid) => {\r\n  const registeredComponent = world[$componentMap].get(component)\r\n  if (!registeredComponent) return false\r\n  const { generationId, bitflag } = registeredComponent\r\n  const mask = world[$entityMasks][generationId][eid]\r\n  return (mask & bitflag) === bitflag\r\n}\r\n\r\n/**\r\n * Adds a component to an entity\r\n *\r\n * @param {World} world\r\n * @param {Component} component\r\n * @param {number} eid\r\n * @param {boolean} [reset=false]\r\n */\r\nexport const addComponent = (world, component, eid, reset=false) => {\r\n  if (eid === undefined) throw new Error('bitECS - entity is undefined.')\r\n  if (!world[$entitySparseSet].has(eid)) throw new Error('bitECS - entity does not exist in the world.')\r\n  if (!world[$componentMap].has(component)) registerComponent(world, component)\r\n  if (hasComponent(world, component, eid)) return\r\n\r\n  const c = world[$componentMap].get(component)\r\n  const { generationId, bitflag, queries, notQueries } = c\r\n    \r\n  // Add bitflag to entity bitmask\r\n  world[$entityMasks][generationId][eid] |= bitflag\r\n\r\n  // todo: archetype graph\r\n  queries.forEach(q => {\r\n    // remove this entity from toRemove if it exists in this query\r\n    q.toRemove.remove(eid)\r\n    const match = queryCheckEntity(world, q, eid)\r\n    if (match) queryAddEntity(q, eid)\r\n    if (!match) queryRemoveEntity(world, q, eid)\r\n    q.entered.remove(eid)\r\n    q.exited.remove(eid)\r\n  })\r\n\r\n  world[$entityComponents].get(eid).add(component)\r\n\r\n  // Zero out each property value\r\n  if (reset) resetStoreFor(component, eid)\r\n}\r\n\r\n/**\r\n * Removes a component from an entity and resets component state unless otherwise specified.\r\n *\r\n * @param {World} world\r\n * @param {Component} component\r\n * @param {number} eid\r\n * @param {boolean} [reset=true]\r\n */\r\nexport const removeComponent = (world, component, eid, reset=true) => {\r\n  if (eid === undefined) throw new Error('bitECS - entity is undefined.')\r\n  if (!world[$entitySparseSet].has(eid)) throw new Error('bitECS - entity does not exist in the world.')\r\n  if (!hasComponent(world, component, eid)) return\r\n\r\n  const c = world[$componentMap].get(component)\r\n  const { generationId, bitflag, queries } = c\r\n\r\n  // Remove flag from entity bitmask\r\n  world[$entityMasks][generationId][eid] &= ~bitflag\r\n  \r\n  // todo: archetype graph\r\n  queries.forEach(q => {\r\n    // remove this entity from toRemove if it exists in this query\r\n    q.toRemove.remove(eid)\r\n    const match = queryCheckEntity(world, q, eid)\r\n    if (match) queryAddEntity(q, eid)\r\n    if (!match) queryRemoveEntity(world, q, eid)\r\n  })\r\n\r\n  world[$entityComponents].get(eid).delete(component)\r\n\r\n  // Zero out each property value\r\n  if (reset) resetStoreFor(component, eid)\r\n}\r\n", "import { $componentMap } from './Component.js'\r\nimport { $queryMap, $queries, $dirtyQueries, $notQueries } from './Query.js'\r\nimport { $entityArray, $entityComponents, $entityMasks, $entitySparseSet, getGlobalSize, removeEntity } from './Entity.js'\r\nimport { resize } from './Storage.js'\r\nimport { SparseSet } from './Util.js'\r\n\r\nexport const $size = Symbol('size')\r\nexport const $resizeThreshold = Symbol('resizeThreshold')\r\nexport const $bitflag = Symbol('bitflag')\r\nexport const $archetypes = Symbol('archetypes')\r\nexport const $localEntities = Symbol('localEntities')\r\nexport const $localEntityLookup = Symbol('localEntityLookup')\r\n\r\nexport const worlds = []\r\n\r\nexport const resizeWorlds = (size) => {\r\n  worlds.forEach(world => {\r\n    world[$size] = size\r\n\r\n    for (let i = 0; i < world[$entityMasks].length; i++) {\r\n      const masks = world[$entityMasks][i];\r\n      world[$entityMasks][i] = resize(masks, size)\r\n    }\r\n    \r\n    world[$resizeThreshold] = world[$size] - (world[$size] / 5)\r\n  })\r\n}\r\n\r\n/**\r\n * Creates a new world.\r\n *\r\n * @returns {object}\r\n */\r\nexport const createWorld = (...args) => {\r\n  const world = typeof args[0] === 'object'\r\n    ? args[0]\r\n    : {}\r\n  const size = typeof args[0] === 'number' \r\n    ? args[0] \r\n    : typeof args[1] === 'number' \r\n      ? args[1] \r\n      : getGlobalSize()\r\n  resetWorld(world, size)\r\n  worlds.push(world)\r\n  return world\r\n}\r\n\r\n/**\r\n * Resets a world.\r\n *\r\n * @param {World} world\r\n * @returns {object}\r\n */\r\nexport const resetWorld = (world, size = getGlobalSize()) => {\r\n  world[$size] = size\r\n\r\n  if (world[$entityArray]) world[$entityArray].forEach(eid => removeEntity(world, eid))\r\n\r\n  world[$entityMasks] = [new Uint32Array(size)]\r\n  world[$entityComponents] = new Map()\r\n  world[$archetypes] = []\r\n\r\n  world[$entitySparseSet] = SparseSet()\r\n  world[$entityArray] = world[$entitySparseSet].dense\r\n\r\n  world[$bitflag] = 1\r\n\r\n  world[$componentMap] = new Map()\r\n\r\n  world[$queryMap] = new Map()\r\n  world[$queries] = new Set()\r\n  world[$notQueries] = new Set()\r\n  world[$dirtyQueries] = new Set()\r\n\r\n  world[$localEntities] = new Map()\r\n  world[$localEntityLookup] = new Map()\r\n\r\n  return world\r\n}\r\n\r\n/**\r\n * Deletes a world.\r\n *\r\n * @param {World} world\r\n */\r\nexport const deleteWorld = (world) => {\r\n  Object.getOwnPropertySymbols(world).forEach($ => { delete world[$] })\r\n  Object.keys(world).forEach(key => { delete world[key] })\r\n  worlds.splice(worlds.indexOf(world), 1)\r\n}\r\n\r\n/**\r\n * Returns all components registered to a world\r\n * \r\n * @param {World} world \r\n * @returns Array\r\n */\r\nexport const getWorldComponents = (world) => Array.from(world[$componentMap].keys())\r\n\r\n/**\r\n * Returns all existing entities in a world\r\n * \r\n * @param {World} world \r\n * @returns Array\r\n */\r\nexport const getAllEntities = (world) => world[$entitySparseSet].dense.slice(0)", "/**\r\n * Defines a new system function.\r\n *\r\n * @param {function} update\r\n * @returns {function}\r\n */\r\n export const defineSystem = (update) => (world, ...args) => {\r\n  update(world, ...args)\r\n  return world\r\n}", "import { createWorld, resetWorld, deleteWorld, getWorldComponents, getAllEntities } from './World.js'\r\nimport { addEntity, removeEntity, setDefaultSize, setRemovedRecycleThreshold, getEntityComponents, entityExists } from './Entity.js'\r\nimport { defineComponent, registerComponent, registerComponents, hasComponent, addComponent, removeComponent } from './Component.js'\r\nimport { defineSystem } from './System.js'\r\nimport { defineQuery, enterQuery, exitQuery, Changed, Not, commitRemovals, resetChangedQuery, removeQuery } from './Query.js'\r\nimport { defineSerializer, defineDeserializer, DESERIALIZE_MODE } from './Serialize.js'\r\nimport { parentArray } from './Storage.js'\r\nimport { TYPES_ENUM } from './Constants.js'\r\n\r\nexport const pipe = (...fns) => (input) => {\r\n  let tmp = input\r\n  for (let i = 0; i < fns.length; i++) {\r\n    const fn = fns[i]\r\n    tmp = fn(tmp)\r\n  }\r\n  return tmp\r\n}\r\n\r\nexport const Types = TYPES_ENUM\r\n\r\nexport {\r\n\r\n  setDefaultSize,\r\n  setRemovedRecycleThreshold,\r\n  createWorld,\r\n  resetWorld,\r\n  deleteWorld,\r\n  addEntity,\r\n  removeEntity,\r\n  entityExists,\r\n  getWorldComponents,\r\n  getAllEntities,\r\n  \r\n  registerComponent,\r\n  registerComponents,\r\n  defineComponent,\r\n  addComponent,\r\n  removeComponent,\r\n  hasComponent,\r\n  getEntityComponents,\r\n\r\n  defineQuery,\r\n  Changed,\r\n  Not,\r\n  enterQuery,\r\n  exitQuery,\r\n  commitRemovals,\r\n  resetChangedQuery,\r\n  removeQuery,\r\n\r\n  defineSystem,\r\n  \r\n  defineSerializer,\r\n  defineDeserializer,\r\n  DESERIALIZE_MODE,\r\n\r\n  parentArray,\r\n\r\n}\r\n"],
  "mappings": "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",
  "names": []
}